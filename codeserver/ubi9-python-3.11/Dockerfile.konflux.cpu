####################
# rpm-base         #
####################
FROM registry.access.redhat.com/ubi9/python-311:latest AS rpm-base

USER root
WORKDIR /root

ENV HOME=/root

ARG CODESERVER_SOURCE_CODE=codeserver/ubi9-python-3.12

ARG NODE_VERSION=20

ARG CODESERVER_VERSION=v4.98.0

COPY ${CODESERVER_SOURCE_CODE}/get_code_server_rpm.sh .

# create dummy file to ensure this stage is awaited before installing rpm
RUN ./get_code_server_rpm.sh && touch /tmp/control

####################
# base             #
####################
FROM registry.access.redhat.com/ubi9/python-311:latest AS base

WORKDIR /opt/app-root/bin

# OS Packages needs to be installed as root
USER 0

# upgrade first to avoid fixable vulnerabilities begin
RUN dnf -y upgrade --refresh --best --nodocs --noplugins --setopt=install_weak_deps=0 --setopt=keepcache=0 \
    && dnf clean all -y
# upgrade first to avoid fixable vulnerabilities end

# Install useful OS packages
RUN dnf install -y mesa-libGL skopeo && dnf clean all && rm -rf /var/cache/yum

# Other apps and tools installed as default user
USER 1001

# Install micropipenv and uv to deploy packages from requirements.txt begin
RUN pip install --no-cache-dir -U "micropipenv[toml]==1.9.0" "uv==0.8.12"
# Install micropipenv and uv to deploy packages from requirements.txt end

# Install the oc client begin
RUN curl -L https://mirror.openshift.com/pub/openshift-v4/$(uname -m)/clients/ocp/stable/openshift-client-linux.tar.gz \
        -o /tmp/openshift-client-linux.tar.gz && \
    tar -xzvf /tmp/openshift-client-linux.tar.gz oc && \
    rm -f /tmp/openshift-client-linux.tar.gz
# Install the oc client end


####################
# codeserver       #
####################
FROM base AS codeserver

ARG TARGETOS TARGETARCH

ARG CODESERVER_SOURCE_CODE=codeserver/ubi9-python-3.11
ARG CODESERVER_VERSION=v4.98.0

USER 0

WORKDIR /opt/app-root/bin

# Install useful OS packages
RUN dnf install -y jq git-lfs libsndfile && dnf clean all && rm -rf /var/cache/yum

# wait for rpm-base stage
COPY --from=rpm-base /tmp/control /dev/null

# Install code-server
# Note: Use cache mounts, bind mounts fail on konflux
# https://redhat-internal.slack.com/archives/C04PZ7H0VA8/p1755628065772589?thread_ts=1755597929.335999&cid=C04PZ7H0VA8
RUN --mount=type=cache,from=rpm-base,source=/tmp/,target=/code-server-rpm/,rw \
    # EXPLANATION: dnf installation produces an "unsigned rpm" error from Konflux (Conforma)
    #  since we're building rpm from source, we will simply unpack it over /
    # dnf install -y "/code-server-rpm/code-server-${CODESERVER_VERSION/v/}-${TARGETARCH}.rpm"
    # dnf -y clean all --enablerepo='*'
    dnf install -y cpio && dnf -y clean all && \
    cd / && rpm2cpio "/code-server-rpm/code-server-${CODESERVER_VERSION/v/}-${TARGETARCH}.rpm" | cpio -idmv

COPY --chown=1001:0 ${CODESERVER_SOURCE_CODE}/utils utils/

# Create and install the extensions though build-time on a temporary directory. Later this directory will copied on the `/opt/app-root/src/.local/share/code-server/extensions` via run-code-server.sh file when it starts up.
RUN mkdir -p /opt/app-root/extensions-temp && \
    code-server --install-extension /opt/app-root/bin/utils/ms-python.python-2025.2.0.vsix --extensions-dir /opt/app-root/extensions-temp && \
    code-server --install-extension /opt/app-root/bin/utils/ms-toolsai.jupyter-2025.2.0.vsix --extensions-dir /opt/app-root/extensions-temp

# Install NGINX to proxy code-server and pass probes check
ENV NGINX_VERSION=1.24 \
    NGINX_SHORT_VER=124 \
    NGINX_CONFIGURATION_PATH=${APP_ROOT}/etc/nginx.d \
    NGINX_CONF_PATH=/etc/nginx/nginx.conf \
    NGINX_DEFAULT_CONF_PATH=${APP_ROOT}/etc/nginx.default.d \
    NGINX_CONTAINER_SCRIPTS_PATH=/usr/share/container-scripts/nginx \
    NGINX_APP_ROOT=${APP_ROOT} \
    NGINX_LOG_PATH=/var/log/nginx \
    NGINX_PERL_MODULE_PATH=${APP_ROOT}/etc/perl

# Modules does not exist
RUN yum install -y https://download.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm && \
    INSTALL_PKGS="bind-utils nginx nginx-mod-stream nginx-mod-http-perl fcgiwrap initscripts chkconfig supervisor" && \
    yum install -y --setopt=tsflags=nodocs $INSTALL_PKGS && \
    rpm -V $INSTALL_PKGS && \
    yum -y clean all --enablerepo='*'

COPY --chown=1001:0 ${CODESERVER_SOURCE_CODE}/supervisord/supervisord.conf /etc/supervisor/conf.d/supervisord.conf

# Copy extra files to the image.
COPY --chown=1001:0 ${CODESERVER_SOURCE_CODE}/nginx/root/ /

# Changing ownership and user rights to support following use-cases:
# 1) running container on OpenShift, whose default security model
#    is to run the container under random UID, but GID=0
# 2) for working root-less container with UID=1001, which does not have
#    to have GID=0
# 3) for default use-case, that is running container directly on operating system,
#    with default UID and GID (1001:0)
# Supported combinations of UID:GID are thus following:
# UID=1001 && GID=0
# UID=<any>&& GID=0
# UID=1001 && GID=<any>
RUN sed -i -f ${NGINX_APP_ROOT}/nginxconf.sed ${NGINX_CONF_PATH} && \
    mkdir -p ${NGINX_APP_ROOT}/etc/nginx.d/ && \
    mkdir -p ${NGINX_APP_ROOT}/etc/nginx.default.d/ && \
    mkdir -p ${NGINX_APP_ROOT}/api/ && \
    mkdir -p ${NGINX_CONTAINER_SCRIPTS_PATH}/nginx-start && \
    mkdir -p ${NGINX_LOG_PATH} && \
    mkdir -p ${NGINX_PERL_MODULE_PATH} && \
    chown -R 1001:0 ${NGINX_CONF_PATH} && \
    chown -R 1001:0 ${NGINX_APP_ROOT}/etc && \
    chown -R 1001:0 ${NGINX_CONTAINER_SCRIPTS_PATH}/nginx-start && \
    chown -R 1001:0 /var/lib/nginx /var/log/nginx /run && \
    chmod    ug+rw  ${NGINX_CONF_PATH} && \
    chmod -R ug+rwX ${NGINX_APP_ROOT}/etc && \
    chmod -R ug+rwX ${NGINX_CONTAINER_SCRIPTS_PATH}/nginx-start && \
    chmod -R ug+rwX /var/lib/nginx /var/log/nginx /run && \
    rpm-file-permissions && \
    # Ensure the temporary directory and target directory have the correct permissions
    mkdir -p /opt/app-root/src/.local/share/code-server/extensions && \
    mkdir -p /opt/app-root/src/.local/share/code-server/coder-logs && \
    chown -R 1001:0 /opt/app-root/src/.local/share/code-server && \
    chown -R 1001:0 /opt/app-root/extensions-temp && \
    chown -R 1001:0 /opt/app-root/src/.config/code-server

## Configure nginx
COPY ${CODESERVER_SOURCE_CODE}/nginx/serverconf/ /opt/app-root/etc/nginx.default.d/
COPY ${CODESERVER_SOURCE_CODE}/nginx/httpconf/ /opt/app-root/etc/nginx.d/
COPY ${CODESERVER_SOURCE_CODE}/nginx/api/ /opt/app-root/api/

# Launcher
COPY --chown=1001:0 ${CODESERVER_SOURCE_CODE}/run-code-server.sh ${CODESERVER_SOURCE_CODE}/run-nginx.sh ./

ENV SHELL=/bin/bash

ENV PYTHONPATH=/opt/app-root/bin/python3

RUN echo "Uninstalling gpg-pubkey RPM packages" && \
    (set -x; rpm -qa gpg-pubkey* | xargs -r rpm -e)

USER 1001

# Install useful packages from Pipfile.lock
COPY ${CODESERVER_SOURCE_CODE}/Pipfile.lock ./

# Install packages and cleanup
RUN echo "Installing softwares and packages" && \
    micropipenv install && \
    rm -f ./Pipfile.lock && \
    # Fix permissions to support pip in Openshift environments \
    chmod -R g+w /opt/app-root/lib/python3.11/site-packages && \
    fix-permissions /opt/app-root -P

WORKDIR /opt/app-root/src

CMD ["/opt/app-root/bin/run-code-server.sh"]

LABEL name="rhoai/odh-workbench-codeserver-datascience-cpu-py311-rhel9" \
      com.redhat.component="odh-workbench-codeserver-datascience-cpu-py311-rhel9" \
      io.k8s.display-name="odh-workbench-codeserver-datascience-cpu-py311-rhel9" \
      summary="code-server image with python 3.11 based on UBI 9" \
      description="code-server image with python 3.11 based on UBI9" \
      io.k8s.description="code-server image with python 3.11 based on UBI9" \
      com.redhat.license_terms="https://www.redhat.com/licenses/Red_Hat_Standard_EULA_20191108.pdf"
